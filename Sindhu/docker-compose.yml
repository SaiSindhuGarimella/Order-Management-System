version: '3.8'

services:
  # Redis - Message Queue
  redis:
    image: redis:7-alpine
    container_name: order-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - order-network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: order-backend
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - DATABASE_NAME=${DATABASE_NAME:-order_management}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - order-network
    restart: unless-stopped

  # Worker Service
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: order-worker
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - DATABASE_NAME=${DATABASE_NAME:-order_management}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PROCESSING_DELAY=${PROCESSING_DELAY:-5}
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - order-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
    container_name: order-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - order-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  order-network:
    driver: bridge

